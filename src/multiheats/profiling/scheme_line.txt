Creating surface profile...
Computing temperature evolution...
Visualisation
Wrote profile results to main.py.lprof
Timer unit: 1e-06 s

Total time: 9.53807 s
File: /home/cmergny/Work/PhD/multiheats/src/multiheats/solvers.py
Function: implicit_scheme at line 30

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    30                                               @profile
    31                                               def implicit_scheme(self, dt, solar_flux):
    32                                                   """
    33                                                   Solves the discretized heat equation implicitely
    34                                                   with Euler Backward Scheme.
    35                                                   Input: prev_temp at time it-1
    36                                                   Returns: new_temp at time it np.array with shape=(nx)
    37                                                   """
    38                                           
    39     82197     407837.0      5.0      4.3          rcoef = dt / self.rho / self.cp
    40     82197      25900.9      0.3      0.3          cond = self.cond
    41     82197      15238.8      0.2      0.2          dx = self.dx
    42     82197     121055.1      1.5      1.3          matrice = np.zeros((3, self.nx))
    43                                           
    44     82197     576432.8      7.0      6.0          dkn = (cond[2:] - cond[1:-1]) / (2 * dx[1:]) + (cond[1:-1] - cond[:-2]) / (
    45     82197     169410.2      2.1      1.8              2 * dx[:-1]
    46                                                   )
    47                                           
    48     82197     103079.8      1.3      1.1          matrice[2, :-2] = (
    49     82197     898859.9     10.9      9.4              -rcoef[1:-1] / dx[:-1] * (-dkn / 2 + 2 * cond[1:-1] / (dx[1:] + dx[:-1]))
    50                                                   )  # an
    51                                           
    52     82197     285832.7      3.5      3.0          matrice[1, 1:-1] = 1 - rcoef[1:-1] / (dx[1:] * dx[:-1]) * (
    53     82197     564769.6      6.9      5.9              dkn / 2 * (dx[1:] - dx[:-1]) - 2 * cond[1:-1]
    54                                                   )  # bn
    55                                           
    56     82197      83962.6      1.0      0.9          matrice[0, 2:] = (
    57     82197     817514.4      9.9      8.6              -rcoef[1:-1] / dx[1:] * (dkn / 2 + 2 * cond[1:-1] / (dx[1:] + dx[:-1]))
    58                                                   )  # cn
    59                                           
    60                                                   # Set BC
    61     82197     237076.7      2.9      2.5          source = self.temp + rcoef * self.qheat
    62     82197    1171274.3     14.2     12.3          s1, sN, b1, c1, aN, bN = self.set_flux_BC(dt, solar_flux)
    63     82197      32355.9      0.4      0.3          source[0] = s1
    64     82197      20950.2      0.3      0.2          source[-1] = sN
    65     82197      21526.5      0.3      0.2          matrice[1, 0] = b1
    66     82197      19482.9      0.2      0.2          matrice[1, -1] = bN
    67     82197      21294.1      0.3      0.2          matrice[0, 1] = c1
    68     82197      19331.7      0.2      0.2          matrice[2, -2] = aN
    69                                           
    70     82197    3907270.3     47.5     41.0          new_temp = scipy.linalg.solve_banded((1, 1), matrice, source)
    71                                           
    72     82197      17614.3      0.2      0.2          return new_temp


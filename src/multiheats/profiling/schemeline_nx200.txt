Creating surface profile...
Computing temperature evolution...
Visualisation
Wrote profile results to main.py.lprof
Timer unit: 1e-06 s

Total time: 7.72409 s
File: /home/cmergny/Work/PhD/multiheats/src/multiheats/solvers.py
Function: implicit_scheme at line 31

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    31                                               @profile
    32                                               def implicit_scheme(self, dt, solar_flux):
    33                                                   """
    34                                                   Solves the discretized heat equation implicitely
    35                                                   with Euler Backward Scheme.
    36                                                   Input: prev_temp at time it-1
    37                                                   Returns: new_temp at time it np.array with shape=(nx)
    38                                                   """
    39                                           
    40     82197     358017.1      4.4      4.6          rcoef = dt / self.rho / self.cp
    41     82197      18851.8      0.2      0.2          cond = self.cond
    42     82197      15625.8      0.2      0.2          dx = self.dx
    43                                           
    44     82197    3178678.3     38.7     41.2          matrice = coeffs_matrice(self.nx, self.cond, dx, rcoef)
    45                                           
    46                                                   # Set BC
    47     82197     186843.9      2.3      2.4          source = self.temp + rcoef * self.qheat
    48     82197     805341.6      9.8     10.4          s1, sN, b1, c1, aN, bN = self.set_flux_BC(rcoef, solar_flux)
    49     82197      28368.3      0.3      0.4          source[0] = s1
    50     82197      18495.1      0.2      0.2          source[-1] = sN
    51     82197      19251.0      0.2      0.2          matrice[1, 0] = b1
    52     82197      19059.8      0.2      0.2          matrice[1, -1] = bN
    53     82197      20877.3      0.3      0.3          matrice[0, 1] = c1
    54     82197      17755.3      0.2      0.2          matrice[2, -2] = aN
    55                                           
    56     82197    3022239.3     36.8     39.1          new_temp = scipy.linalg.solve_banded((1, 1), matrice, source)
    57                                           
    58     82197      14682.3      0.2      0.2          return new_temp

